{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "contracts/Ajo.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract Ajo {\n    struct Group {\n        string name;\n        address token; // ERC20 token used\n        uint256 contributionAmount;\n        uint256 cyclePeriod; // in seconds (weeks * 1 weeks)\n        address[] members;\n        uint256 currentCycle; // index of current payout round\n        uint256 startTime;\n        mapping(uint256 => mapping(address => bool)) contributions; // cycle => member => contributed?\n        mapping(uint256 => bool) payoutClaimed; // cycle => claimed?\n        mapping(uint256 => uint256) cycleBalance; // cycle => current balance\n    }\n\n    uint256 public groupCount;\n    mapping(uint256 => Group) public groups;\n\n    event GroupCreated(uint256 indexed groupId, string name, address token, uint256 amount, uint256 cyclePeriod, address[] members);\n    event ContributionMade(uint256 indexed groupId, uint256 indexed cycle, address member, uint256 amount);\n    event PoolClaimed(uint256 indexed groupId, uint256 indexed cycle, address member, uint256 amount);\n\n    modifier onlyMember(uint256 groupId) {\n        require(isMember(groupId, msg.sender), \"Not a member\");\n        _;\n    }\n\n    function createGroup(\n        string memory _name,\n        address _token,\n        uint256 _amount,\n        uint256 _cycleWeeks,\n        address[] memory _members\n    ) external returns (uint256) {\n        require(_members.length > 1, \"Need at least 2 members\");\n        require(_amount > 0, \"Invalid amount\");\n\n        groupCount++;\n        Group storage g = groups[groupCount];\n        g.name = _name;\n        g.token = _token;\n        g.contributionAmount = _amount;\n        g.cyclePeriod = _cycleWeeks * 1 weeks;\n        g.members = _members;\n        g.currentCycle = 0;\n        g.startTime = block.timestamp;\n\n        emit GroupCreated(groupCount, _name, _token, _amount, g.cyclePeriod, _members);\n        return groupCount;\n    }\n\n    function contribute(uint256 groupId) external onlyMember(groupId) {\n        Group storage g = groups[groupId];\n\n        uint256 cycle = getCurrentCycle(groupId);\n        require(!g.contributions[cycle][msg.sender], \"Already contributed this cycle\");\n\n        IERC20 token = IERC20(g.token);\n        require(token.transferFrom(msg.sender, address(this), g.contributionAmount), \"Transfer failed\");\n\n        g.contributions[cycle][msg.sender] = true;\n        g.cycleBalance[cycle] += g.contributionAmount;\n\n        emit ContributionMade(groupId, cycle, msg.sender, g.contributionAmount);\n    }\n\n    function claimPool(uint256 groupId) external onlyMember(groupId) {\n        Group storage g = groups[groupId];\n\n        uint256 cycle = getCurrentCycle(groupId);\n        require(!g.payoutClaimed[cycle], \"Payout already claimed\");\n\n        address eligible = g.members[cycle % g.members.length];\n        require(msg.sender == eligible, \"Not your turn\");\n\n        // Check all members contributed\n        for (uint256 i = 0; i < g.members.length; i++) {\n            require(g.contributions[cycle][g.members[i]], \"Not all members contributed\");\n        }\n\n        uint256 poolAmount = g.cycleBalance[cycle];\n        g.payoutClaimed[cycle] = true;\n        g.cycleBalance[cycle] = 0;\n\n        IERC20(g.token).transfer(eligible, poolAmount);\n\n        emit PoolClaimed(groupId, cycle, eligible, poolAmount);\n    }\n\n    function getCurrentCycle(uint256 groupId) public view returns (uint256) {\n        Group storage g = groups[groupId];\n        return (block.timestamp - g.startTime) / g.cyclePeriod;\n    }\n\n    function isMember(uint256 groupId, address user) public view returns (bool) {\n        Group storage g = groups[groupId];\n        for (uint256 i = 0; i < g.members.length; i++) {\n            if (g.members[i] == user) return true;\n        }\n        return false;\n    }\n\n    // Get members (since struct with array in mapping isn't easily readable)\n    function getMembers(uint256 groupId) external view returns (address[] memory) {\n        return groups[groupId].members;\n    }\n\n    function getCurrentCycleBalance(uint256 groupId) external view returns (uint256) {\n        uint256 currentCycle = getCurrentCycle(groupId);\n        return groups[groupId].cycleBalance[currentCycle];\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}